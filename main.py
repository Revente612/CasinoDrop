import random
import sqlite3
import time
import re
from telebot import TeleBot, types
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot('5001368696:AAEtqufmeXROZAjA2IBBHJZDRe_iiPFPTmE/test')
ADMINS = [5001448188, 2201285640]  # –¢–í–û–ò –ê–î–ú–ò–ù–´

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
MAX_BALANCE = 1000000
MAX_BET = 1000
MIN_BET = 1

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect('casino.db', check_same_thread=False, isolation_level=None)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
def init_db():
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                    (id INTEGER PRIMARY KEY, username TEXT, balance INTEGER DEFAULT 0, 
                    wins INTEGER DEFAULT 0, losses INTEGER DEFAULT 0, total_bet INTEGER DEFAULT 0,
                    reg_date TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS deposits
                    (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, amount INTEGER, 
                    status TEXT, date TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS withdrawals
                    (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, amount INTEGER, 
                    status TEXT, date TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS games
                    (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, game_type TEXT, 
                    result TEXT, bet INTEGER, win_amount INTEGER, date TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS admin_logs
                    (id INTEGER PRIMARY KEY AUTOINCREMENT, admin_id INTEGER, action TEXT, 
                    target_user INTEGER, details TEXT, date TEXT)''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS security_logs
                    (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, action TEXT, 
                    details TEXT, ip TEXT, date TEXT)''')
    conn.commit()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMINS

def validate_user_id(user_id):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return isinstance(user_id, int) and user_id > 0

def validate_amount(amount):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã"""
    try:
        amount = int(amount)
        return amount >= 0
    except:
        return False

def safe_balance_update(user_id, amount):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    if not validate_user_id(user_id) or not validate_amount(abs(amount)):
        return False
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        if not result:
            return False
            
        current_balance = result[0]
        new_balance = current_balance + amount
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        if new_balance < 0 or new_balance > MAX_BALANCE:
            return False
            
        cursor.execute("UPDATE users SET balance = ? WHERE id = ?", (new_balance, user_id))
        conn.commit()
        return True
    except Exception as e:
        print(f"Balance update error: {e}")
        return False

def log_security_event(user_id, action, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    try:
        cursor.execute("INSERT INTO security_logs (user_id, action, details, date) VALUES (?, ?, ?, ?)",
                      (user_id, action, details, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    except Exception as e:
        print(f"Security logging error: {e}")

def log_admin_action(admin_id, action, target_user=None, details=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞"""
    if not is_admin(admin_id):
        return
        
    try:
        cursor.execute("INSERT INTO admin_logs (admin_id, action, target_user, details, date) VALUES (?, ?, ?, ?, ?)",
                      (admin_id, action, target_user, details, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    except Exception as e:
        print(f"Admin logging error: {e}")

# –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.row(
        types.KeyboardButton('üéÆ –ò–ì–†–ê–¢–¨'),
        types.KeyboardButton('üí∞ –ë–ê–õ–ê–ù–°')
    )
    markup.row(
        types.KeyboardButton('üì• –ü–û–ü–û–õ–ù–ò–¢–¨'),
        types.KeyboardButton('üì§ –í–´–í–ï–°–¢–ò')
    )
    markup.row(
        types.KeyboardButton('üìä –ü–†–û–§–ò–õ–¨'),
        types.KeyboardButton('üé∞ –û –ö–ê–ó–ò–ù–û')
    )
    return markup

# –ê–¥–º–∏–Ω –º–µ–Ω—é
def admin_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.row(
        types.KeyboardButton('üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò'),
        types.KeyboardButton('üì• –ó–ê–Ø–í–ö–ò –ü–û–ü–û–õ–ù–ï–ù–ò–Ø')
    )
    markup.row(
        types.KeyboardButton('üì§ –ó–ê–Ø–í–ö–ò –í–´–í–û–î–ê'),
        types.KeyboardButton('üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê')
    )
    markup.row(
        types.KeyboardButton('üìã –õ–û–ì–ò'),
        types.KeyboardButton('‚ö° –ê–ù–ù–£–õ–ò–†–û–í–ê–¢–¨ –ë–ê–õ–ê–ù–°')
    )
    markup.row(
        types.KeyboardButton('üéÆ –ò–ì–†–ê–¢–¨'),
        types.KeyboardButton('üìä –ü–†–û–§–ò–õ–¨')
    )
    return markup

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    try:
        cursor.execute("INSERT OR IGNORE INTO users (id, username, balance, reg_date) VALUES (?, ?, ?, ?)", 
                      (user_id, username, 0, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    except Exception as e:
        print(f"Database error: {e}")
    
    welcome_text = (
        "üé∞ <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í CASINODROP!</b>\n\n"
        "üëã <b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, @{}</b>!\n\n"
        "üíé <b>–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å</b>\n"
        "üéØ <b>–ß–µ—Å—Ç–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b> 60% –ø—Ä–æ–∏–≥—Ä—ã—à–∞ | 40% –≤—ã–∏–≥—Ä—ã—à–∞\n\n"
        "üì¢ <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê:</b>\n"
        "‚û°Ô∏è @CasinoDrop\n\n"
        "üíµ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> 1 –º–æ–Ω–µ—Ç–∞\n"
        "üí∞ <b>–í—ã–∏–≥—Ä—ã—à:</b> 2x –æ—Ç —Å—Ç–∞–≤–∫–∏\n"
        "‚ö° <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</b>"
    ).format(username)
    
    bot.send_message(message.chat.id, welcome_text, 
                    parse_mode='HTML', reply_markup=main_menu())

# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∫–∏
@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        log_security_event(user_id, "unauthorized_admin_access")
        return
    
    admin_text = (
        "üëë <b>–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ CASINODROP</b>\n\n"
        "‚ö° <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</b>\n\n"
        "üÜî <b>–í–∞—à ID:</b> <code>{}</code>\n"
        "üìÖ <b>–í—Ä–µ–º—è:</b> {}\n\n"
        "üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n"
        "‚Ä¢ üë• –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ üì• –û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n"
        "‚Ä¢ üì§ –í—ã–ø–ª–∞—Ç–∞ –≤—ã–≤–æ–¥–æ–≤\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n"
        "‚Ä¢ ‚ö° –ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
    ).format(user_id, datetime.now().strftime('%d.%m.%Y %H:%M'))
    
    bot.send_message(message.chat.id, admin_text, 
                    parse_mode='HTML', reply_markup=admin_menu())

# –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
@bot.message_handler(func=lambda message: message.text == 'üì• –ü–û–ü–û–õ–ù–ò–¢–¨')
def deposit(message):
    user_id = message.from_user.id
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –Ø –û–¢–ü–†–ê–í–ò–õ(–ê)", callback_data="deposit_sent"))
    
    deposit_text = (
        "üí≥ <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>\n\n"
        "üí∞ <b>–ö—É—Ä—Å:</b> 1 —Ç–æ—Ä—Ç = 1 –º–æ–Ω–µ—Ç–∞\n"
        "üì® <b>–ö–æ—à–µ–ª–µ–∫:</b> @Gifts_456\n\n"
        "üìù <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—Ä—Ç—ã –Ω–∞ @Gifts_456\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ –Ø –û–¢–ü–†–ê–í–ò–õ(–ê)'\n"
        "3. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞ (–¥–æ 3 –º–∏–Ω—É—Ç)\n\n"
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï:</b> –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤–∞—à ID: <code>{}</code>\n\n"
        "‚ö° <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!</b>"
    ).format(user_id)
    
    bot.send_message(message.chat.id, deposit_text, 
                    parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª"
@bot.callback_query_handler(func=lambda call: call.data == "deposit_sent")
def deposit_sent(call):
    user_id = call.from_user.id
    amount = 1  # 1 —Ç–æ—Ä—Ç = 1 –º–æ–Ω–µ—Ç–∞
    
    try:
        cursor.execute("INSERT INTO deposits (user_id, amount, status, date) VALUES (?, ?, 'pending', ?)", 
                      (user_id, amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    except Exception as e:
        print(f"Database error: {e}")
    
    success_text = (
        "üì® <b>–ó–ê–Ø–í–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê!</b>\n\n"
        "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
        "üí∞ <b>–°—É–º–º–∞:</b> {} –º–æ–Ω–µ—Ç–∞\n"
        "‚è∞ <b>–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –¥–æ 3 –º–∏–Ω—É—Ç\n"
        "üÜî <b>–í–∞—à ID:</b> <code>{}</code>\n\n"
        "‚ö° <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å</b>"
    ).format(amount, user_id)
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text=success_text, parse_mode='HTML')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –ü–†–ò–ù–Ø–¢–¨", callback_data=f"accept_deposit_{user_id}"),
                types.InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"reject_deposit_{user_id}")
            )
            
            admin_notification = (
                "üì• <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï</b>\n\n"
                "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{}\n"
                "üÜî <b>ID:</b> <code>{}</code>\n"
                "üí∞ <b>–°—É–º–º–∞:</b> {} –º–æ–Ω–µ—Ç\n"
                "üìÖ <b>–í—Ä–µ–º—è:</b> {}\n\n"
                "‚ö° <b>–û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</b>"
            ).format(call.from_user.username or '–ù–µ—Ç username', user_id, amount, 
                    datetime.now().strftime('%H:%M %d.%m.%Y'))
            
            bot.send_message(admin_id, admin_notification, 
                           parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            print(f"Error sending to admin {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith("accept_deposit_"))
def accept_deposit(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        log_security_event(call.from_user.id, "unauthorized_deposit_accept", call.data)
        return
    
    try:
        user_id = int(call.data.split("_")[2])
        if not validate_user_id(user_id):
            raise ValueError("Invalid user ID")
    except:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", show_alert=True)
        return
    
    try:
        cursor.execute("SELECT amount FROM deposits WHERE user_id = ? AND status = 'pending' ORDER BY id DESC LIMIT 1", (user_id,))
        deposit_data = cursor.fetchone()
        
        if deposit_data:
            amount = deposit_data[0]
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            if safe_balance_update(user_id, amount):
                cursor.execute("UPDATE deposits SET status = 'accepted' WHERE user_id = ? AND status = 'pending'", (user_id,))
                conn.commit()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                log_admin_action(call.from_user.id, "accept_deposit", user_id, f"Amount: {amount}")
                
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text=f"‚úÖ <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ü–†–ò–ù–Ø–¢–û</b>\n\n"
                                          f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>\n"
                                          f"üí∞ <b>–°—É–º–º–∞:</b> {amount} –º–æ–Ω–µ—Ç\n"
                                          f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                                          f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω</b>",
                                     parse_mode='HTML')
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(user_id,
                                   f"üí∞ <b>–ë–ê–õ–ê–ù–° –ü–û–ü–û–õ–ù–ï–ù!</b>\n\n"
                                   f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞</b>\n"
                                   f"üí∏ <b>–°—É–º–º–∞:</b> <b>{amount} –º–æ–Ω–µ—Ç</b>\n"
                                   f"üíé <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\n"
                                   f"üéÆ <b>–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!</b>",
                                   parse_mode='HTML')
                except:
                    pass
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!", show_alert=True)
    except Exception as e:
        print(f"Database error: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_deposit_"))
def reject_deposit(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        log_security_event(call.from_user.id, "unauthorized_deposit_reject", call.data)
        return
    
    try:
        user_id = int(call.data.split("_")[2])
        if not validate_user_id(user_id):
            raise ValueError("Invalid user ID")
    except:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", show_alert=True)
        return
    
    try:
        cursor.execute("UPDATE deposits SET status = 'rejected' WHERE user_id = ? AND status = 'pending'", (user_id,))
        conn.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        log_admin_action(call.from_user.id, "reject_deposit", user_id)
        
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                             text=f"‚ùå <b>–ü–û–ü–û–õ–ù–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û</b>\n\n"
                                  f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>\n"
                                  f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                                  f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>",
                             parse_mode='HTML')
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            bot.send_message(user_id,
                           f"‚ùå <b>–ó–ê–Ø–í–ö–ê –û–¢–ö–õ–û–ù–ï–ù–ê</b>\n\n"
                           f"üò¢ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n"
                           f"üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω</b>\n\n"
                           f"üíé @Gifts_456",
                           parse_mode='HTML')
        except:
            pass
    except Exception as e:
        print(f"Database error: {e}")

# –ò–≥—Ä—ã
@bot.message_handler(func=lambda message: message.text == 'üéÆ –ò–ì–†–ê–¢–¨')
def play(message):
    user_id = message.from_user.id
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        balance = 0
    
    if balance < MIN_BET:
        no_money_text = (
            "üò¢ <b>–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í</b>\n\n"
            "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {} –º–æ–Ω–µ—Ç\n"
            "üí∏ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> {} –º–æ–Ω–µ—Ç–∞\n\n"
            "üì• <b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!</b>\n"
            "‚ö° <b>–ò –ø–æ–º–Ω–∏—Ç–µ - —É–¥–∞—á–∞ –ª—é–±–∏—Ç —Å–º–µ–ª—ã—Ö!</b>"
        ).format(balance, MIN_BET)
        
        bot.send_message(message.chat.id, no_money_text, parse_mode='HTML')
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.row(
        types.InlineKeyboardButton("üé≤ –ö–û–°–¢–ò", callback_data="game_dice"),
        types.InlineKeyboardButton("‚öΩ –§–£–¢–ë–û–õ", callback_data="game_football")
    )
    markup.row(
        types.InlineKeyboardButton("üèÄ –ë–ê–°–ö–ï–¢–ë–û–õ", callback_data="game_basketball"),
        types.InlineKeyboardButton("üé∞ –°–ü–ò–ù", callback_data="game_slot")
    )
    
    play_text = (
        "üéÆ <b>–í–´–ë–ï–†–ò–¢–ï –ò–ì–†–£</b>\n\n"
        "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
        "üéØ <b>–®–∞–Ω—Å—ã:</b> 40% –≤—ã–∏–≥—Ä—ã—à | 60% –ø—Ä–æ–∏–≥—Ä—ã—à\n"
        "üí∞ <b>–í—ã–∏–≥—Ä—ã—à:</b> 2x –æ—Ç —Å—Ç–∞–≤–∫–∏\n\n"
        "üíµ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b>\n"
        "1 üéØ 3 üéØ 5 üéØ 10 üéØ 20 üéØ 50 üéØ\n\n"
        "‚ö° <b>–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!</b>"
    ).format(balance)
    
    bot.send_message(message.chat.id, play_text, 
                    parse_mode='HTML', reply_markup=markup)

# –í—ã–±–æ—Ä —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("game_"))
def select_bet(call):
    user_id = call.from_user.id
    
    try:
        game_type = call.data.split("_")[1]
        if game_type not in ['dice', 'football', 'basketball', 'slot']:
            raise ValueError("Invalid game type")
    except:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–≥—Ä—ã!", show_alert=True)
        return
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        balance = 0
    
    markup = types.InlineKeyboardMarkup(row_width=3)
    bets = [1, 3, 5, 10, 20, 50]
    buttons = []
    
    for bet in bets:
        if balance >= bet and MIN_BET <= bet <= MAX_BET:
            buttons.append(types.InlineKeyboardButton(f"{bet} üéØ", callback_data=f"bet_{game_type}_{bet}"))
        else:
            buttons.append(types.InlineKeyboardButton(f"{bet} ‚ùå", callback_data="no_money"))
    
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton("üîô –ù–ê–ó–ê–î –ö –ò–ì–†–ê–ú", callback_data="back_to_games"))
    
    game_names = {
        'dice': 'üé≤ –ö–û–°–¢–ò',
        'football': '‚öΩ –§–£–¢–ë–û–õ', 
        'basketball': 'üèÄ –ë–ê–°–ö–ï–¢–ë–û–õ',
        'slot': 'üé∞ –°–ü–ò–ù'
    }
    
    bet_text = (
        "üéØ <b>–í–´–ë–ï–†–ò–¢–ï –°–¢–ê–í–ö–£</b>\n\n"
        "üéÆ <b>–ò–≥—Ä–∞:</b> {}\n"
        "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
        "üí∏ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞–≤–∫–∏:</b>\n"
        "‚ö° <b>–í—ã–∏–≥—Ä—ã—à 2x –æ—Ç —Å—Ç–∞–≤–∫–∏!</b>"
    ).format(game_names[game_type], balance)
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text=bet_text, parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –∏ –∏–≥—Ä—ã
@bot.callback_query_handler(func=lambda call: call.data.startswith("bet_"))
def game_handler(call):
    user_id = call.from_user.id
    
    try:
        data = call.data.split("_")
        if len(data) != 3:
            raise ValueError("Invalid callback data")
            
        game_type = data[1]
        bet = int(data[2])
        
        if game_type not in ['dice', 'football', 'basketball', 'slot']:
            raise ValueError("Invalid game type")
            
        if not (MIN_BET <= bet <= MAX_BET):
            raise ValueError("Invalid bet amount")
    except:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", show_alert=True)
        log_security_event(user_id, "invalid_bet_request", call.data)
        return
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        balance = 0
    
    if balance < bet:
        bot.answer_callback_query(call.id, "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í!", show_alert=True)
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if not safe_balance_update(user_id, -bet):
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    try:
        cursor.execute("UPDATE users SET total_bet = total_bet + ? WHERE id = ?", (bet, user_id))
        conn.commit()
    except Exception as e:
        print(f"Database error: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞..."
    loading_text = (
        "üéØ <b>–°–¢–ê–í–ö–ê –ü–†–ò–ù–Ø–¢–ê...</b>\n\n"
        "üí∏ <b>–°—É–º–º–∞:</b> {} –º–æ–Ω–µ—Ç\n"
        "üéÆ <b>–ò–≥—Ä–∞:</b> {}\n"
        "‚è≥ <b>–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...</b>\n\n"
        "‚ö° <b>–£–¥–∞—á–∏!</b>"
    ).format(bet, game_type)
    
    loading_msg = bot.send_message(call.message.chat.id, loading_text, parse_mode='HTML')
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∞–∑–∞—Ä—Ç–∞
    time.sleep(2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (40% —à–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞)
    is_win = random.random() < 0.4
    
    if is_win:
        win_amount = bet * 2  # –í—ã–∏–≥—Ä—ã—à 2x
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
        if safe_balance_update(user_id, win_amount):
            try:
                cursor.execute("UPDATE users SET wins = wins + 1 WHERE id = ?", (user_id,))
                result_text = "üéâ –ü–û–ë–ï–î–ê!"
                result_emoji = "‚úÖ"
            except Exception as e:
                print(f"Database error: {e}")
        else:
            win_amount = 0
            result_text = "‚ùå –û–®–ò–ë–ö–ê –í–´–ü–õ–ê–¢–´!"
            result_emoji = "‚ö†Ô∏è"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
        if game_type == 'dice':
            user_dice = random.randint(4, 6)  # –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            bot_dice = random.randint(1, 3)   # –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            game_result = f"üé≤ <b>–í–∞—à –∫—É–±–∏–∫:</b> {user_dice} | <b>–ë–æ—Ç:</b> {bot_dice}"
        elif game_type == 'football':
            game_result = "‚öΩ <b>–ú–Ø–ß –í –í–û–†–û–¢–ê–•! –ì–û–û–û–õ!</b>"
        elif game_type == 'basketball':
            game_result = "üèÄ <b>–ú–Ø–ß –í –ö–û–†–ó–ò–ù–ï! –û—Ç–ª–∏—á–Ω—ã–π –±—Ä–æ—Å–æ–∫!</b>"
        elif game_type == 'slot':
            game_result = "üé∞ <b>–î–ñ–ï–ö–ü–û–¢! –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞!</b>"
            
    else:
        win_amount = 0
        try:
            cursor.execute("UPDATE users SET losses = losses + 1 WHERE id = ?", (user_id,))
            result_text = "üíÄ –ü–†–û–ò–ì–†–´–®!"
            result_emoji = "‚ùå"
        except Exception as e:
            print(f"Database error: {e}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä
        if game_type == 'dice':
            user_dice = random.randint(1, 3)  # –ü—Ä–æ–∏–≥—Ä—ã—à–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            bot_dice = random.randint(4, 6)   # –í—ã–∏–≥—Ä—ã—à–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            game_result = f"üé≤ <b>–í–∞—à –∫—É–±–∏–∫:</b> {user_dice} | <b>–ë–æ—Ç:</b> {bot_dice}"
        elif game_type == 'football':
            game_result = "‚ùå <b>–ú–ò–ú–û –í–û–†–û–¢! –ü—Ä–æ–º–∞—Ö...</b>"
        elif game_type == 'basketball':
            game_result = "‚ùå <b>–ú–ò–ú–û –ö–û–†–ó–ò–ù–´! –ù–µ—É–¥–∞—á–∞...</b>"
        elif game_type == 'slot':
            game_result = "üé∞ <b>–ù–∏—á–µ–≥–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!</b>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –∏—Å—Ç–æ—Ä–∏—é
    try:
        cursor.execute("INSERT INTO games (user_id, game_type, result, bet, win_amount, date) VALUES (?, ?, ?, ?, ?, ?)",
                      (user_id, game_type, 'win' if is_win else 'loss', bet, win_amount, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        conn.commit()
    except Exception as e:
        print(f"Database error: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        new_balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        new_balance = 0
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞..." –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    bot.delete_message(call.message.chat.id, loading_msg.message_id)
    
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üéÆ –ò–ì–†–ê–¢–¨ –°–ù–û–í–ê", callback_data=f"game_{game_type}"),
        types.InlineKeyboardButton("üìä –ü–†–û–§–ò–õ–¨", callback_data="profile")
    )
    
    result_text_full = (
        "üéÆ <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ì–†–´</b>\n\n"
        "{}\n\n"
        "üíµ <b>–°—Ç–∞–≤–∫–∞:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
        "üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> <b>{}</b>\n"
        "üí∞ <b>–í—ã–∏–≥—Ä—ã—à:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
        "üíé <b>–ë–∞–ª–∞–Ω—Å:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
        "{} <i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞</i>"
    ).format(game_result, bet, result_text, win_amount, new_balance, result_emoji)
    
    bot.send_message(call.message.chat.id, result_text_full, 
                    parse_mode='HTML', reply_markup=markup)

# –ë–∞–ª–∞–Ω—Å
@bot.message_handler(func=lambda message: message.text == 'üí∞ –ë–ê–õ–ê–ù–°')
def show_balance(message):
    user_id = message.from_user.id
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        balance = 0
    
    balance_text = (
        "üí∞ <b>–í–ê–® –ë–ê–õ–ê–ù–°</b>\n\n"
        "üíé <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
        "üì• <b>–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</b> - –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ\n"
        "üéÆ <b>–ò–≥—Ä–∞—Ç—å</b> - –∫–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ\n\n"
        "‚ö° <b>–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ!</b>"
    ).format(balance)
    
    bot.send_message(message.chat.id, balance_text, parse_mode='HTML')

# –ü—Ä–æ—Ñ–∏–ª—å - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
@bot.message_handler(func=lambda message: message.text == 'üìä –ü–†–û–§–ò–õ–¨')
def show_profile(message):
    user_id = message.from_user.id
    
    try:
        cursor.execute("SELECT username, balance, wins, losses, total_bet, reg_date FROM users WHERE id = ?", (user_id,))
        user_data = cursor.fetchone()
    except Exception as e:
        print(f"Database error: {e}")
        user_data = None
    
    if user_data:
        username, balance, wins, losses, total_bet, reg_date = user_data
        total_games = wins + losses
        win_rate = (wins / total_games * 100) if total_games > 0 else 0
        
        profile_text = (
            "üìä <b>–í–ê–® –ü–†–û–§–ò–õ–¨</b>\n\n"
            "üë§ <b>–ò–≥—Ä–æ–∫:</b> <b>@{}</b>\n"
            "üÜî <b>ID:</b> <code>{}</code>\n"
            "üíé <b>–ë–∞–ª–∞–Ω—Å:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
            "üéÆ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:</b>\n"
            "‚úÖ <b>–ü–æ–±–µ–¥:</b> <b>{}</b>\n"
            "‚ùå <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> <b>{}</b>\n"
            "üìà <b>–í–∏–Ω—Ä–µ–π—Ç:</b> <b>{:.1f}%</b>\n"
            "üíµ <b>–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
            "üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {}\n\n"
            "‚ö° <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</b>"
        ).format(username, user_id, balance, wins, losses, win_rate, total_bet, reg_date)
        
        bot.send_message(message.chat.id, profile_text, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, "‚ùå <b>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML')

# –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
@bot.message_handler(func=lambda message: message.text == 'üì§ –í–´–í–ï–°–¢–ò')
def withdraw(message):
    user_id = message.from_user.id
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        balance = 0
    
    if balance < 1:
        no_money_text = (
            "üò¢ <b>–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í</b>\n\n"
            "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {} –º–æ–Ω–µ—Ç\n"
            "üí∏ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥:</b> 1 –º–æ–Ω–µ—Ç–∞\n\n"
            "üéÆ <b>–ò–≥—Ä–∞–π—Ç–µ —á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–æ–ª—å—à–µ!</b>\n"
            "‚ö° <b>–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!</b>"
        ).format(balance)
        
        bot.send_message(message.chat.id, no_money_text, parse_mode='HTML')
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìù –ó–ê–ö–ê–ó–ê–¢–¨ –í–´–í–û–î", callback_data="request_withdraw"))
    
    withdraw_text = (
        "üì§ <b>–í–´–í–û–î –°–†–ï–î–°–¢–í</b>\n\n"
        "üí∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
        "üí∏ <b>–ö—É—Ä—Å:</b> 1 –º–æ–Ω–µ—Ç–∞ = 1 —Ç–æ—Ä—Ç\n\n"
        "üìù <b>–î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>\n"
        "‚è∞ <b>–í—ã–≤–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
        "‚ö° <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã!</b>"
    ).format(balance)
    
    bot.send_message(message.chat.id, withdraw_text, 
                    parse_mode='HTML', reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
@bot.callback_query_handler(func=lambda call: call.data == "request_withdraw")
def request_withdraw(call):
    user_id = call.from_user.id
    
    try:
        cursor.execute("SELECT balance FROM users WHERE id = ?", (user_id,))
        result = cursor.fetchone()
        balance = result[0] if result else 0
    except Exception as e:
        print(f"Database error: {e}")
        balance = 0
    
    if balance < 1:
        bot.answer_callback_query(call.id, "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í!", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
    try:
        cursor.execute("INSERT INTO withdrawals (user_id, amount, status, date) VALUES (?, ?, 'pending', ?)", 
                      (user_id, balance, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
        
        # –û–±–Ω—É–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if safe_balance_update(user_id, -balance):
            conn.commit()
        else:
            cursor.execute("DELETE FROM withdrawals WHERE user_id = ? AND status = 'pending'", (user_id,))
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞!", show_alert=True)
            return
            
    except Exception as e:
        print(f"Database error: {e}")
    
    withdraw_success_text = (
        "üì® <b>–ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î –û–¢–ü–†–ê–í–õ–ï–ù–ê!</b>\n\n"
        "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n"
        "üí∞ <b>–°—É–º–º–∞:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
        "üí∏ <b>–ö –ø–æ–ª—É—á–µ–Ω–∏—é:</b> <b>{} —Ç–æ—Ä—Ç–æ–≤</b>\n"
        "‚è∞ <b>–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
        "üÜî <b>–í–∞—à ID:</b> <code>{}</code>\n\n"
        "‚ö° <b>–í—ã–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!</b>"
    ).format(balance, balance, user_id)
    
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                         text=withdraw_success_text, parse_mode='HTML')
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    for admin_id in ADMINS:
        try:
            markup = types.InlineKeyboardMarkup()
            markup.row(
                types.InlineKeyboardButton("‚úÖ –í–´–ü–õ–ê–¢–ò–¢–¨", callback_data=f"pay_withdraw_{user_id}"),
                types.InlineKeyboardButton("‚ùå –û–¢–ö–õ–û–ù–ò–¢–¨", callback_data=f"reject_withdraw_{user_id}")
            )
            
            admin_notification = (
                "üì§ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î</b>\n\n"
                "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{}\n"
                "üÜî <b>ID:</b> <code>{}</code>\n"
                "üí∞ <b>–°—É–º–º–∞:</b> {} –º–æ–Ω–µ—Ç ({} —Ç–æ—Ä—Ç–æ–≤)\n"
                "üìÖ <b>–í—Ä–µ–º—è:</b> {}\n\n"
                "‚ö° <b>–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã</b>"
            ).format(call.from_user.username or '–ù–µ—Ç username', user_id, balance, balance,
                    datetime.now().strftime('%H:%M %d.%m.%Y'))
            
            bot.send_message(admin_id, admin_notification, 
                           parse_mode='HTML', reply_markup=markup)
        except Exception as e:
            print(f"Error sending to admin {admin_id}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–ø–ª–∞—Ç—ã –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith("pay_withdraw_"))
def pay_withdraw(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        log_security_event(call.from_user.id, "unauthorized_withdraw_pay", call.data)
        return
    
    try:
        user_id = int(call.data.split("_")[2])
        if not validate_user_id(user_id):
            raise ValueError("Invalid user ID")
    except:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", show_alert=True)
        return
    
    try:
        cursor.execute("SELECT amount FROM withdrawals WHERE user_id = ? AND status = 'pending' ORDER BY id DESC LIMIT 1", (user_id,))
        withdraw_data = cursor.fetchone()
        
        if withdraw_data:
            amount = withdraw_data[0]
            cursor.execute("UPDATE withdrawals SET status = 'paid' WHERE user_id = ? AND status = 'pending'", (user_id,))
            conn.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_admin_action(call.from_user.id, "pay_withdraw", user_id, f"Amount: {amount}")
            
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                 text=f"‚úÖ <b>–í–´–ü–õ–ê–¢–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n"
                                      f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>\n"
                                      f"üí∞ <b>–°—É–º–º–∞:</b> {amount} —Ç–æ—Ä—Ç–æ–≤\n"
                                      f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                                      f"‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –≤—ã–ø–ª–∞—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>",
                                 parse_mode='HTML')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                bot.send_message(user_id,
                               f"üí∞ <b>–í–´–í–û–î –í–´–ü–û–õ–ù–ï–ù!</b>\n\n"
                               f"‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</b>\n"
                               f"üí∏ <b>–°—É–º–º–∞:</b> <b>{amount} —Ç–æ—Ä—Ç–æ–≤</b>\n"
                               f"üì® <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç</b>\n\n"
                               f"üéÆ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!</b>",
                               parse_mode='HTML')
            except:
                pass
    except Exception as e:
        print(f"Database error: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –∞–¥–º–∏–Ω–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith("reject_withdraw_"))
def reject_withdraw(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
        log_security_event(call.from_user.id, "unauthorized_withdraw_reject", call.data)
        return
    
    try:
        user_id = int(call.data.split("_")[2])
        if not validate_user_id(user_id):
            raise ValueError("Invalid user ID")
    except:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å!", show_alert=True)
        return
    
    try:
        cursor.execute("SELECT amount FROM withdrawals WHERE user_id = ? AND status = 'pending' ORDER BY id DESC LIMIT 1", (user_id,))
        withdraw_data = cursor.fetchone()
        
        if withdraw_data:
            amount = withdraw_data[0]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if safe_balance_update(user_id, amount):
                cursor.execute("UPDATE withdrawals SET status = 'rejected' WHERE user_id = ? AND status = 'pending'", (user_id,))
                conn.commit()
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                log_admin_action(call.from_user.id, "reject_withdraw", user_id, f"Amount: {amount}")
                
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                     text=f"‚ùå <b>–í–´–í–û–î –û–¢–ö–õ–û–ù–ï–ù</b>\n\n"
                                          f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>\n"
                                          f"üí∞ <b>–°—É–º–º–∞:</b> {amount} –º–æ–Ω–µ—Ç\n"
                                          f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                                          f"‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã</b>",
                                     parse_mode='HTML')
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    bot.send_message(user_id,
                                   f"‚ùå <b>–í–´–í–û–î –û–¢–ö–õ–û–ù–ï–ù</b>\n\n"
                                   f"üò¢ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>\n"
                                   f"üíé <b>–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å</b>\n"
                                   f"üìû <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è</b>\n\n"
                                   f"üíé @Gifts_456",
                                   parse_mode='HTML')
                except:
                    pass
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
    except Exception as e:
        print(f"Database error: {e}")

# –û –ö–∞–∑–∏–Ω–æ
@bot.message_handler(func=lambda message: message.text == 'üé∞ –û –ö–ê–ó–ò–ù–û')
def about_casino(message):
    try:
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM games")
        total_games = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(bet) FROM games")
        total_bet_result = cursor.fetchone()
        total_bet = total_bet_result[0] if total_bet_result[0] else 0
    except Exception as e:
        print(f"Database error: {e}")
        total_users = 0
        total_games = 0
        total_bet = 0
    
    about_text = (
        "üé∞ <b>CASINODROP - –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n\n"
        "üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ë–û–¢–ê:</b>\n"
        "üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <b>{}</b>\n"
        "üéÆ <b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:</b> <b>{}</b>\n"
        "üíµ <b>–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
        "üéØ <b>–ü–†–ê–í–ò–õ–ê –ò–ì–†–´:</b>\n"
        "‚Ä¢ üé∞ <b>–®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞:</b> 40%\n"
        "‚Ä¢ üíÄ <b>–®–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä—ã—à–∞:</b> 60%\n"
        "‚Ä¢ üí∞ <b>–í—ã–∏–≥—Ä—ã—à:</b> 2x –æ—Ç —Å—Ç–∞–≤–∫–∏\n"
        "‚Ä¢ üíé <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:</b> 1 –º–æ–Ω–µ—Ç–∞\n\n"
        "üíé <b>–í–ê–õ–Æ–¢–ê:</b>\n"
        "1 —Ç–æ—Ä—Ç = 1 –º–æ–Ω–µ—Ç–∞\n\n"
        "üì¢ <b>–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê:</b>\n"
        "@CasinoDrop\n\n"
        "‚ö° <b>–ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞</b>\n"
        "üîí <b>–ß–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
        "üëë <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</b>\n"
        "üí∞ <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã</b>"
    ).format(total_users, total_games, total_bet)
    
    bot.send_message(message.chat.id, about_text, parse_mode='HTML')

# –ê–î–ú–ò–ù –§–£–ù–ö–¶–ò–ò

# –ê–¥–º–∏–Ω - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@bot.message_handler(func=lambda message: message.text == 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê' and message.from_user.id in ADMINS)
def admin_stats(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM games")
        total_games = cursor.fetchone()[0]
        
        cursor.execute("SELECT SUM(bet) FROM games")
        total_bet_result = cursor.fetchone()
        total_bet = total_bet_result[0] if total_bet_result[0] else 0
        
        cursor.execute("SELECT SUM(win_amount) FROM games")
        total_win_result = cursor.fetchone()
        total_win = total_win_result[0] if total_win_result[0] else 0
        
        cursor.execute("SELECT COUNT(*) FROM deposits WHERE status = 'accepted'")
        total_deposits = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM withdrawals WHERE status = 'paid'")
        total_withdrawals = cursor.fetchone()[0]
        
        profit = total_bet - total_win
        
        stats_text = (
            "üëë <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´</b>\n\n"
            "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <b>{}</b>\n"
            "üéÆ <b>–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:</b> <b>{}</b>\n"
            "üíµ <b>–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
            "üí∞ <b>–í—ã–ø–ª–∞—á–µ–Ω–æ –≤—ã–∏–≥—Ä—ã—à–µ–π:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n"
            "üí∏ <b>–ü—Ä–∏–±—ã–ª—å —Å–∏—Å—Ç–µ–º—ã:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
            "üì• <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π:</b> <b>{}</b>\n"
            "üì§ <b>–í—ã–≤–æ–¥–æ–≤:</b> <b>{}</b>\n\n"
            "üìÖ <b>–î–∞—Ç–∞:</b> {}"
        ).format(total_users, total_games, total_bet, total_win, profit, 
                 total_deposits, total_withdrawals, datetime.now().strftime('%d.%m.%Y %H:%M'))
        
        bot.send_message(message.chat.id, stats_text, parse_mode='HTML')
    except Exception as e:
        print(f"Database error: {e}")

# –ê–¥–º–∏–Ω - –∑–∞—è–≤–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@bot.message_handler(func=lambda message: message.text == 'üì• –ó–ê–Ø–í–ö–ò –ü–û–ü–û–õ–ù–ï–ù–ò–Ø' and message.from_user.id in ADMINS)
def admin_deposits(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        cursor.execute("SELECT d.user_id, u.username, d.amount, d.date FROM deposits d LEFT JOIN users u ON d.user_id = u.id WHERE d.status = 'pending' ORDER BY d.id DESC")
        pending_deposits = cursor.fetchall()
        
        if not pending_deposits:
            bot.send_message(message.chat.id, "üì≠ <b>–ù–ï–¢ –û–ñ–ò–î–ê–Æ–©–ò–• –ó–ê–Ø–í–û–ö</b>", parse_mode='HTML')
            return
        
        text = "üì• <b>–û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–Ø–í–ö–ò –ü–û–ü–û–õ–ù–ï–ù–ò–Ø</b>\n\n"
        
        for deposit in pending_deposits:
            user_id, username, amount, date = deposit
            text += f"üë§ @{username or '–ù–µ—Ç username'} | ID: <code>{user_id}</code>\n"
            text += f"üí∞ –°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç\n"
            text += f"üìÖ {date}\n"
            text += "‚îÄ" * 30 + "\n"
        
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    except Exception as e:
        print(f"Database error: {e}")

# –ê–¥–º–∏–Ω - –∑–∞—è–≤–∫–∏ –≤—ã–≤–æ–¥–∞
@bot.message_handler(func=lambda message: message.text == 'üì§ –ó–ê–Ø–í–ö–ò –í–´–í–û–î–ê' and message.from_user.id in ADMINS)
def admin_withdrawals(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        cursor.execute("SELECT w.user_id, u.username, w.amount, w.date FROM withdrawals w LEFT JOIN users u ON w.user_id = u.id WHERE w.status = 'pending' ORDER BY w.id DESC")
        pending_withdrawals = cursor.fetchall()
        
        if not pending_withdrawals:
            bot.send_message(message.chat.id, "üì≠ <b>–ù–ï–¢ –û–ñ–ò–î–ê–Æ–©–ò–• –ó–ê–Ø–í–û–ö</b>", parse_mode='HTML')
            return
        
        text = "üì§ <b>–û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–Ø–í–ö–ò –í–´–í–û–î–ê</b>\n\n"
        
        for withdrawal in pending_withdrawals:
            user_id, username, amount, date = withdrawal
            text += f"üë§ @{username or '–ù–µ—Ç username'} | ID: <code>{user_id}</code>\n"
            text += f"üí∞ –°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç ({amount} —Ç–æ—Ä—Ç–æ–≤)\n"
            text += f"üìÖ {date}\n"
            text += "‚îÄ" * 30 + "\n"
        
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    except Exception as e:
        print(f"Database error: {e}")

# –ê–¥–º–∏–Ω - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@bot.message_handler(func=lambda message: message.text == 'üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò' and message.from_user.id in ADMINS)
def admin_users(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        cursor.execute("SELECT id, username, balance, reg_date FROM users ORDER BY id DESC LIMIT 10")
        users = cursor.fetchall()
        
        text = "üë• <b>–ü–û–°–õ–ï–î–ù–ò–ï 10 –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô</b>\n\n"
        
        for user in users:
            user_id, username, balance, reg_date = user
            text += f"üë§ @{username or '–ù–µ—Ç username'}\n"
            text += f"üÜî ID: <code>{user_id}</code>\n"
            text += f"üíé –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
            text += f"üìÖ {reg_date}\n"
            text += "‚îÄ" * 30 + "\n"
        
        cursor.execute("SELECT COUNT(*) FROM users")
        total_users = cursor.fetchone()[0]
        
        text += f"\nüìä <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <b>{total_users}</b>"
        
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    except Exception as e:
        print(f"Database error: {e}")

# –ê–¥–º–∏–Ω - –ª–æ–≥–∏
@bot.message_handler(func=lambda message: message.text == 'üìã –õ–û–ì–ò' and message.from_user.id in ADMINS)
def admin_logs(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        cursor.execute("SELECT al.admin_id, al.action, al.target_user, al.details, al.date, u.username FROM admin_logs al LEFT JOIN users u ON al.target_user = u.id ORDER BY al.id DESC LIMIT 20")
        logs = cursor.fetchall()
        
        text = "üìã <b>–ü–û–°–õ–ï–î–ù–ò–ï 20 –õ–û–ì–û–í</b>\n\n"
        
        for log in logs:
            admin_id, action, target_user, details, date, target_username = log
            text += f"üë§ <b>–ê–¥–º–∏–Ω:</b> <code>{admin_id}</code>\n"
            text += f"‚ö° <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> {action}\n"
            if target_user:
                text += f"üéØ <b>–¶–µ–ª—å:</b> @{target_username or '–ù–µ—Ç username'} (<code>{target_user}</code>)\n"
            if details:
                text += f"üìù <b>–î–µ—Ç–∞–ª–∏:</b> {details}\n"
            text += f"üìÖ <b>–í—Ä–µ–º—è:</b> {date}\n"
            text += "‚îÄ" * 30 + "\n"
        
        if not logs:
            text += "üì≠ <b>–õ–æ–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>"
        
        bot.send_message(message.chat.id, text, parse_mode='HTML')
    except Exception as e:
        print(f"Database error: {e}")

# –ê–¥–º–∏–Ω - –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å
@bot.message_handler(func=lambda message: message.text == '‚ö° –ê–ù–ù–£–õ–ò–†–û–í–ê–¢–¨ –ë–ê–õ–ê–ù–°' and message.from_user.id in ADMINS)
def annul_balance(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    msg = bot.send_message(message.chat.id, 
                          "‚ö° <b>–ê–ù–ù–£–õ–ò–†–û–í–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>\n\n"
                          "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:",
                          parse_mode='HTML')
    bot.register_next_step_handler(msg, process_annul_user_id)

def process_annul_user_id(message):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        user_id = int(message.text)
        
        if not validate_user_id(user_id):
            bot.send_message(message.chat.id, "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>", parse_mode='HTML')
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT username, balance FROM users WHERE id = ?", (user_id,))
        user_data = cursor.fetchone()
        
        if not user_data:
            bot.send_message(message.chat.id, "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!</b>", parse_mode='HTML')
            return
        
        username, current_balance = user_data
        
        msg = bot.send_message(message.chat.id,
                              f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{username or '–ù–µ—Ç username'}\n"
                              f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                              f"üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {current_balance} –º–æ–Ω–µ—Ç\n\n"
                              f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è (0 –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω—É–ª–µ–Ω–∏—è):",
                              parse_mode='HTML')
        bot.register_next_step_handler(msg, process_annul_amount, user_id, username, current_balance)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID!</b>", parse_mode='HTML')

def process_annul_amount(message, user_id, username, current_balance):
    if not is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!</b>", parse_mode='HTML')
        return
        
    try:
        amount = int(message.text)
        
        if amount < 0:
            bot.send_message(message.chat.id, "‚ùå <b>–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!</b>", parse_mode='HTML')
            return
        
        if amount == 0:
            # –ü–æ–ª–Ω–æ–µ –æ–±–Ω—É–ª–µ–Ω–∏–µ
            new_balance = 0
            amount_to_remove = current_balance
        else:
            if amount > current_balance:
                bot.send_message(message.chat.id, "‚ùå <b>–°—É–º–º–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å!</b>", parse_mode='HTML')
                return
            new_balance = current_balance - amount
            amount_to_remove = amount
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if safe_balance_update(user_id, -amount_to_remove):
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            log_admin_action(message.from_user.id, "annul_balance", user_id, f"Removed: {amount_to_remove}, New balance: {new_balance}")
            
            result_text = (
                "‚úÖ <b>–ë–ê–õ–ê–ù–° –ê–ù–ù–£–õ–ò–†–û–í–ê–ù</b>\n\n"
                "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{}\n"
                "üÜî <b>ID:</b> <code>{}</code>\n"
                "üí∞ <b>–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–æ:</b> {} –º–æ–Ω–µ—Ç\n"
                "üíé <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {} –º–æ–Ω–µ—Ç\n"
                "‚è∞ <b>–í—Ä–µ–º—è:</b> {}\n\n"
                "‚ö° <b>–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>"
            ).format(username, user_id, amount_to_remove, new_balance, datetime.now().strftime('%H:%M %d.%m.%Y'))
            
            bot.send_message(message.chat.id, result_text, parse_mode='HTML')
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                if amount_to_remove > 0:
                    bot.send_message(user_id,
                                   f"‚ö†Ô∏è <b>–ê–ù–ù–£–õ–ò–†–û–í–ê–ù–ò–ï –ë–ê–õ–ê–ù–°–ê</b>\n\n"
                                   f"üí∞ <b>–°–ø–∏—Å–∞–Ω–æ:</b> {amount_to_remove} –º–æ–Ω–µ—Ç\n"
                                   f"üíé <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} –º–æ–Ω–µ—Ç\n\n"
                                   f"üìû <b>–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>",
                                   parse_mode='HTML')
            except:
                pass
        else:
            bot.send_message(message.chat.id, "‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!</b>", parse_mode='HTML')
            
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!</b>", parse_mode='HTML')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç –¥–µ–Ω–µ–≥"
@bot.callback_query_handler(func=lambda call: call.data == "no_money")
def no_money(call):
    bot.answer_callback_query(call.id, "‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –°–†–ï–î–°–¢–í –ù–ê –ë–ê–õ–ê–ù–°–ï!", show_alert=True)

# –ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–∞–º
@bot.callback_query_handler(func=lambda call: call.data == "back_to_games")
def back_to_games(call):
    play(call.message)

# –ü—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ callback
@bot.callback_query_handler(func=lambda call: call.data == "profile")
def profile_callback(call):
    user_id = call.from_user.id
    
    try:
        cursor.execute("SELECT username, balance, wins, losses, total_bet, reg_date FROM users WHERE id = ?", (user_id,))
        user_data = cursor.fetchone()
    except Exception as e:
        print(f"Database error: {e}")
        user_data = None
    
    if user_data:
        username, balance, wins, losses, total_bet, reg_date = user_data
        total_games = wins + losses
        win_rate = (wins / total_games * 100) if total_games > 0 else 0
        
        profile_text = (
            "üìä <b>–í–ê–® –ü–†–û–§–ò–õ–¨</b>\n\n"
            "üë§ <b>–ò–≥—Ä–æ–∫:</b> <b>@{}</b>\n"
            "üÜî <b>ID:</b> <code>{}</code>\n"
            "üíé <b>–ë–∞–ª–∞–Ω—Å:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
            "üéÆ <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ì–†:</b>\n"
            "‚úÖ <b>–ü–æ–±–µ–¥:</b> <b>{}</b>\n"
            "‚ùå <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–π:</b> <b>{}</b>\n"
            "üìà <b>–í–∏–Ω—Ä–µ–π—Ç:</b> <b>{:.1f}%</b>\n"
            "üíµ <b>–í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫:</b> <b>{} –º–æ–Ω–µ—Ç</b>\n\n"
            "üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {}\n\n"
            "‚ö° <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</b>"
        ).format(username, user_id, balance, wins, losses, win_rate, total_bet, reg_date)
        
        bot.send_message(call.message.chat.id, profile_text, parse_mode='HTML')

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("üé∞ CASINODROP BOT –ó–ê–ü–£–©–ï–ù!")
    print("‚ö° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("üîí –†–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    print("üëë –ê–¥–º–∏–Ω—ã:", ADMINS)
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"Bot error: {e}")